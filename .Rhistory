?subset()
> filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
?sample()
> library(tidyverse)
> ?mutate()
library(tidyverse)> ?mutate()
library(tidyverse)
? mutate()
> demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
> demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
clearPushBack()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
>demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
>demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
head(mpg)
jead(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
plt + geom_bar() #plot a bar plot
head(mpg)
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
? lmm()
? lm(9)
? lm()
? summary()
> ?read.csv()
?read.csv()
~read.csv(MerchaCar_mpg)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg <- read.csv(file=MerchaCar_mpg.csv")
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg <- read.csv(file=MerchaCar_mpg.csv")
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg <- read.csv(file=MerchaCar_mpg.csv)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg <- read.csv(file='MerchaCar_mpg.csv',check.namex=F,stringsAsFactors =F)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg <- read.csv(file='MerchaCar_mpg.csv',check.names =F,stringsAsFactors =F)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
#mpg <- read.csv(file='MerchaCar_mpg.csv',check.names =F,stringsAsFactors =F)
mpg <- read.csv(file="MerchaCar_Statistical_Analysis/MerchaCar_mpg.csv")
Name,Vehicle_Class,Year,Total_Miles
John,Compact_Sedan,2012,87456
Claire,Pickup,2017,15022
Xavier,SUV,2019,4532
Kerri,Subcompact_Sedan,2018,12349
# RSciprt
# Read in the MerchaCar_mpg.csv file.
#mpg <- read.csv(file='MerchaCar_mpg.csv',check.names =F,stringsAsFactors =F)
mpg <- read.csv(file='MerchaCar_mpg.csv', check.names =F, stringsAsFactors = F)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
#mpg <- read.csv(file='MerchaCar_mpg.csv',check.names =F,stringsAsFactors =F)
mpg <- read.csv(file='MerchaCar_mpg.csv', check.names =F, stringsAsFactors = F)
mpg <- read.csv("C:/Documentos/bootcamp/modulo15/MerchaCar_Statistical_Analysis/MerchaCar_mpg.csv", stringsAsFactors = FALSE)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
#mpg <- read.csv(file='MerchaCar_mpg.csv', check.names =F, stringsAsFactors = F)
#mpg <- read.csv("C:/Documentos/bootcamp/modulo15/MerchaCar_Statistical_Analysis/MerchaCar_mpg.csv", stringsAsFactors = FALSE)
mpg <- read.csv(file='MerchaCar_mpg.csv',check.names =F,stringsAsFactors =F)
mpg <- read.csv(file="MerchaCar_Statistical_Analysis//MerchaCar_mpg.csv", check.names =F, stringsAsFactors =F)
mpg_table <- read.csv(file='MerchaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg_table <- read.csv(file='MerchaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# RSciprt
# Read in the MerchaCar_mpg.csv file.
mpg_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
setwd("~/Documents/bootcamp/modulo15/MerchaCar_Statistical_Analysis")
# AutosRUs’ MechaCar projecrt
# RSciprt
library (dplyr)
library(tidyverse)
library(magrittr)
car_df <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
names (car_df)
lm (mpg~vehicle_length,car_df) #linear model
summary(lm(mpg~vehicle_length,car_df))
lm (mpg~vehicle_weight,car_df)
summary(lm(mpg~vehicle_weight,car_df))
lm (mpg~spoiler_angle,car_df)
summary(lm(mpg~spoiler_angle,car_df))
lm (mpg~ground_clearance,car_df)
summary(lm(mpg~ground_clearance,car_df))
lm(mpg~AWD,car_df)
summary(lm(mpg~AWD,car_df))
# Combine and plot pg vs each variable
plot(car_df$mpg~car_df$vehicle_length)
plot(car_df$mpg~car_df$vehicle_weight)
plot(car_df$mpg~car_df$spoiler_angle)
plot(car_df$mpg~car_df$ground_clearance)
plot(car_df$mpg~car_df$AWD)
#calculate correlation coefficients
used_matrix <- as.matrix(car_df[,c("mpg", "vehicle_length","vehicle_weight", "spoiler_angle","ground_clearance", "AWD")]) #convert data frame into numeric matrix
cor(used_matrix)
typemodel_mpg<-lm(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD, data=car_df)
summary(typemodel_mpg)
typemodel_mpg$coefficients
psi_df <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F)
# Create total_summary table with mean, median, variance, sd for psi
#group_by(mean,median,variance, sd)
#total_summary <- psi_df %>% group_by(PSI)%>% summarize(mean(),median(), variance(), sd())
total_summary <- psi_df %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=sd(PSI)**2, SD=sd(PSI))
# Create a lot_summary table that shows psi metrics for each lot
lot_summary <- psi_df %>% group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=sd(PSI)**2, SD=sd(PSI))
# Deliverable 3: T-Tests on Suspension Coils (20 points)
# Create t.test to compare all manufacturing lots vs. population mean
t.test(psi_df$PSI, mu=mean(psi_df$PSI)) #compare sample versus population means
# Create t.test and its subset() argument to determine difference between sample and mean
#Lot 1
t.test(subset(psi_df, Manufacturing_Lot == "Lot1")$PSI, mu=1500)
#Lot 2
t.test(subset(psi_df, Manufacturing_Lot == "Lot2")$PSI, mu=1500)
#Lot 3
t.test(subset(psi_df, Manufacturing_Lot == "Lot3")$PSI, mu=1500)
## ## August 15
View(psi_df)
View(used_matrix)
View(typemodel_mpg)
View(total_summary)
View(psi_df)
View(lot_summary)
View(car_df)
View(lot_summary)
View(psi_df)
View(car_df)
View(typemodel_mpg)
View(total_summary)
View(total_summary)
View(total_summary)
View(lot_summary)
View(used_matrix)
# AutosRUs’ MechaCar projecrt
# RSciprt
library (dplyr)
library(tidyverse)
library(magrittr)
car_df <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
names (car_df)
lm (mpg~vehicle_length,car_df) #linear model
summary(lm(mpg~vehicle_length,car_df))
lm (mpg~vehicle_weight,car_df)
summary(lm(mpg~vehicle_weight,car_df))
lm (mpg~spoiler_angle,car_df)
summary(lm(mpg~spoiler_angle,car_df))
lm (mpg~ground_clearance,car_df)
summary(lm(mpg~ground_clearance,car_df))
lm(mpg~AWD,car_df)
summary(lm(mpg~AWD,car_df))
# Combine and plot pg vs each variable
plot(car_df$mpg~car_df$vehicle_length)
plot(car_df$mpg~car_df$vehicle_weight)
plot(car_df$mpg~car_df$spoiler_angle)
plot(car_df$mpg~car_df$ground_clearance)
plot(car_df$mpg~car_df$AWD)
#calculate correlation coefficients
used_matrix <- as.matrix(car_df[,c("mpg", "vehicle_length","vehicle_weight", "spoiler_angle","ground_clearance", "AWD")]) #convert data frame into numeric matrix
cor(used_matrix)
typemodel_mpg<-lm(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD, data=car_df)
summary(typemodel_mpg)
typemodel_mpg$coefficients
psi_df <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F)
# Create total_summary table with mean, median, variance, sd for psi
#group_by(mean,median,variance, sd)
#total_summary <- psi_df %>% group_by(PSI)%>% summarize(mean(),median(), variance(), sd())
total_summary <- psi_df %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=sd(PSI)**2, SD=sd(PSI))
# Create a lot_summary table that shows psi metrics for each lot
lot_summary <- psi_df %>% group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=sd(PSI)**2, SD=sd(PSI))
# Create t.test to compare all manufacturing lots vs. population mean
t.test(psi_df$PSI, mu=mean(psi_df$PSI)) #compare sample versus population means
# Create t.test and its subset() argument to determine difference between sample and mean
#Lot 1
t.test(subset(psi_df, Manufacturing_Lot == "Lot1")$PSI, mu=1500)
#Lot 2
t.test(subset(psi_df, Manufacturing_Lot == "Lot2")$PSI, mu=1500)
#Lot 3
t.test(subset(psi_df, Manufacturing_Lot == "Lot3")$PSI, mu=1500)
## ## August 15
